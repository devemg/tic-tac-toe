{"version":3,"sources":["Components/Square/Square.js","Components/Board/Board.js","Components/Game/Game.js","assets/icon.svg","App.js","index.js"],"names":["Square","props","color","value","className","onClick","Board","i","this","squares","renderSquare","React","Component","calculateWinner","lines","length","a","b","c","Game","state","history","Array","fill","stepNumber","xIsNext","isPlaying","handleRestart","setState","handleStart","prev","slice","concat","map","step","move","desc","jumpTo","prevState","winner","status","current","moves","getMoves","handleClick","getColorMessage","App","alt","src","logo","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.09f2746b.chunk.js","sourcesContent":["import './Square.css';\r\n\r\n/**\r\n * Represent a piece of the game\r\n * Is a clickable element\r\n * @param {*} props \r\n * @returns \r\n */\r\nfunction Square (props) {\r\n  let color = 'font-transparent';\r\n  if(props.value){\r\n    color = props.value === 'X'?'font-pink':'font-green'\r\n  }\r\n    return (\r\n      <button className={`square ${color}`} onClick={props.onClick}>\r\n        {props.value?props.value:'1'}\r\n      </button>\r\n    );\r\n}\r\n\r\nexport default Square;","import React from 'react';\r\nimport Square from \"../Square/Square\";\r\nimport './Board.css'; \r\n\r\n/**\r\n * Board of Game\r\n */\r\nexport default class Board extends React.Component {\r\n    renderSquare(i) {\r\n      return (\r\n        <Square\r\n          value={this.props.squares[i]}\r\n          onClick={() => this.props.onClick(i)}\r\n        />\r\n      );\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <div className=\"board\">\r\n            {this.renderSquare(0)}\r\n            {this.renderSquare(1)}\r\n            {this.renderSquare(2)}\r\n            {this.renderSquare(3)}\r\n            {this.renderSquare(4)}\r\n            {this.renderSquare(5)}\r\n            {this.renderSquare(6)}\r\n            {this.renderSquare(7)}\r\n            {this.renderSquare(8)}\r\n        </div>\r\n      );\r\n    }\r\n  }","import React from 'react';\r\nimport Board from \"../Board/Board\";\r\nimport './Game.css';\r\n\r\n/**\r\n * Contains the game logic\r\n */\r\nclass Game extends React.Component {\r\n  state = {\r\n    history: [\r\n      {\r\n        squares: Array(9).fill(null)\r\n      }\r\n    ],\r\n    stepNumber: 0,\r\n    xIsNext: true,\r\n    isPlaying:true\r\n  };\r\n\r\n  /**\r\n   * Handle restart game\r\n   */\r\n  handleRestart = ()=>{\r\n    this.setState(()=>({\r\n      history: [\r\n        {\r\n          squares: Array(9).fill(null)\r\n        }\r\n      ],\r\n      stepNumber: 0,\r\n      xIsNext: true,\r\n      isPlaying: true\r\n    }));\r\n  }\r\n\r\n  handleStart = ()=>{\r\n    this.setState((prev)=>({ ...prev,isPlaying: true }));\r\n  }\r\n  \r\n    /**\r\n     * Handle click of squares\r\n     * @param {*} i \r\n     * @returns \r\n     */\r\n    handleClick(i) {\r\n      if(!this.state.isPlaying){\r\n        return;\r\n      }\r\n      const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n      const current = history[history.length - 1];\r\n      const squares = current.squares.slice();\r\n      if (calculateWinner(squares) || squares[i]) {\r\n        return;\r\n      }\r\n      squares[i] = this.state.xIsNext ? \"X\" : \"O\";\r\n      this.setState(()=>({\r\n        history: history.concat([\r\n          {\r\n            squares: squares\r\n          }\r\n        ]),\r\n        stepNumber: history.length,\r\n        xIsNext: !this.state.xIsNext\r\n      }));\r\n    }\r\n\r\n    /**\r\n     * Get the move element\r\n     * @returns \r\n     */\r\n    getMoves(history){\r\n      const moves = history.map((step, move) => {\r\n        const desc = move ?\r\n          'Go to move #' + move :\r\n          'Go to game start';\r\n        return (\r\n          <li key={move}>\r\n            <button className=\"btn-history\" onClick={() => this.jumpTo(move)}>{desc}</button>\r\n          </li>\r\n        );\r\n      });\r\n      return moves;\r\n    }\r\n  \r\n    /**\r\n     * Jump to movement\r\n     * @param {*} step \r\n     */\r\n    jumpTo(step) {\r\n      this.setState((prevState)=>({\r\n        ...prevState,\r\n        stepNumber: step,\r\n        xIsNext: (step % 2) === 0,\r\n        isPlaying: (step+1) === this.state.history.length\r\n      }));\r\n    }\r\n  \r\n    /**\r\n     * Get color of message\r\n     */\r\n    getColorMessage(winner){\r\n      if(winner){\r\n        return winner === 'X'?'font-pink':'font-green';\r\n      }\r\n      return ''\r\n    }\r\n\r\n    render() {\r\n      const history = this.state.history;\r\n      const current = history[this.state.stepNumber];\r\n      const winner = calculateWinner(current.squares);\r\n      const moves = this.getMoves(history);  \r\n      let status;\r\n      if (winner) {\r\n        status = \"Winner: \" + winner;\r\n      } else if(this.state.history.length<10){\r\n        status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\r\n      }else {\r\n        status = \"anyone's won!\";\r\n      }\r\n  \r\n      return (\r\n        <div className=\"game-container\">\r\n          <div className=\"game-actions\">\r\n          <button \r\n          className={`start-button ${this.state.history.length>1?'':'btn-invisible'}`} \r\n          onClick={this.handleRestart} > Restart </button>\r\n          </div>\r\n          <div className=\"game\">  \r\n            <div className=\"game-board\">\r\n              <Board\r\n                squares={current.squares}\r\n                onClick={i => this.handleClick(i)}\r\n              />\r\n            </div>\r\n            <div className=\"game-info\">\r\n              <h2>History</h2>\r\n              <ol>{moves}</ol>\r\n            </div>\r\n        </div>\r\n        <div className=\"game-messages\">\r\n          <p className={this.getColorMessage(winner)}>{status}</p>\r\n        </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  \r\n  function calculateWinner(squares) {\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6]\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n        return squares[a];\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  \r\nexport default Game;","export default __webpack_public_path__ + \"static/media/icon.6784de7f.svg\";","import Game from \"./Components/Game/Game\";\r\nimport './App.css';\r\nimport logo from './assets/icon.svg'; \r\n/**\r\n * Represents all application\r\n */\r\nfunction App() {\r\n    return (\r\n        <div className=\"contanier-all\">\r\n           <h1> <img alt=\"f\" className=\"img-logo\" src={logo}/> Tic Tac Toe</h1>\r\n           <Game />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","import ReactDOM from 'react-dom';\r\nimport App from \"./App\";\r\n  \r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}